name: release-cicd
on:
  push:
    branches: [ main ]
jobs:
  tag-test:
    runs-on: ubuntu-latest 
    steps:
    - uses: codfish/semantic-release-action@v1
      with:
        dry_run: true
        branches: |
          [
            '+([0-9])?(.{+([0-9]),x}).x',
            'master',
            'next',
            'next-major',
            {
              name: 'beta',
              prerelease: true
            },
            {
              name: 'alpha',
              prerelease: true
            }
          ]
        repository_url: https://github.com/codfish/semantic-release-action.git
        tag_format: 'v${version}'
        plugins: |
          ['@semantic-release/commit-analyzer', '@semantic-release/github']
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - uses: actions/checkout@v2
    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: maven
    - name: Build with Docker
      run: docker build -t 906295378353.dkr.ecr.cn-north-1.amazonaws.com.cn/litedemo/usage-managment:${version} .
  gitpull:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: maven
  junit-test:
    needs: gitpull
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2     
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: maven
      - name: Build with Maven
        run: mvn  test
      - name: Test Report
        uses: dorny/test-reporter@v1.5.0
        if: success() || failure()    
        with:
          name: JEST Tests    
          path: target/surefire-reports/TEST-*.xml 
          reporter: java-junit     
  testng:
    needs: gitpull
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: maven
    - name: Build with Maven
      run: mvn  test
    - name: Publish Test Report
      if: ${{ always() }}
      uses: scacap/action-surefire-report@v1.0.5
      with:
          github_token: ${{ secrets.GITHUB_TOKEN }} 
  Sonar:
    needs: [testng, junit-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=VerisLite_UsageManagment   
  Build_Push:
    needs: Sonar
    runs-on: ubuntu-latest 
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: maven
    - name: Build with Maven
      run: mvn -B package -Dmaven.test.skip=true
    - name: Build with Docker
      run: docker build -t 906295378353.dkr.ecr.cn-north-1.amazonaws.com.cn/litedemo/usage-managment:1.0.0 .
    - name: Push with Docker
      run: |
        docker login -u AWS -p ${{ secrets.ECR_PASSWORD }} 906295378353.dkr.ecr.cn-north-1.amazonaws.com.cn
        docker push 906295378353.dkr.ecr.cn-north-1.amazonaws.com.cn/litedemo/usage-managment:1.0.0  
  Deploy:
    needs: Build_Push
    runs-on: ubuntu-latest 
    steps:
      # --- # 
      - name: Restart Service
        uses: ianbelcher/eks-kubectl-action@master
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: cn-north-1
          cluster_name: verislitecloud
          args: rollout restart deployment/umapi -n verisdemo
      - name: verify deployment
        uses: ianbelcher/eks-kubectl-action@master
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: cn-north-1
          cluster_name: verislitecloud
          args: rollout status deployment/umapi -n verisdemo
